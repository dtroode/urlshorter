// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateShortURL provides a mock function with given fields: ctx, originalURL
func (_m *Service) CreateShortURL(ctx context.Context, originalURL string) (*string, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortURL")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortURL'
type Service_CreateShortURL_Call struct {
	*mock.Call
}

// CreateShortURL is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *Service_Expecter) CreateShortURL(ctx interface{}, originalURL interface{}) *Service_CreateShortURL_Call {
	return &Service_CreateShortURL_Call{Call: _e.mock.On("CreateShortURL", ctx, originalURL)}
}

func (_c *Service_CreateShortURL_Call) Run(run func(ctx context.Context, originalURL string)) *Service_CreateShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_CreateShortURL_Call) Return(_a0 *string, _a1 error) *Service_CreateShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateShortURL_Call) RunAndReturn(run func(context.Context, string) (*string, error)) *Service_CreateShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginalURL provides a mock function with given fields: ctx, shortUrl
func (_m *Service) GetOriginalURL(ctx context.Context, shortUrl string) (*string, error) {
	ret := _m.Called(ctx, shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURL")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, shortUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalURL'
type Service_GetOriginalURL_Call struct {
	*mock.Call
}

// GetOriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortUrl string
func (_e *Service_Expecter) GetOriginalURL(ctx interface{}, shortUrl interface{}) *Service_GetOriginalURL_Call {
	return &Service_GetOriginalURL_Call{Call: _e.mock.On("GetOriginalURL", ctx, shortUrl)}
}

func (_c *Service_GetOriginalURL_Call) Run(run func(ctx context.Context, shortUrl string)) *Service_GetOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_GetOriginalURL_Call) Return(_a0 *string, _a1 error) *Service_GetOriginalURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOriginalURL_Call) RunAndReturn(run func(context.Context, string) (*string, error)) *Service_GetOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
