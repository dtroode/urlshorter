// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Token is an autogenerated mock type for the Token type
type Token struct {
	mock.Mock
}

type Token_Expecter struct {
	mock *mock.Mock
}

func (_m *Token) EXPECT() *Token_Expecter {
	return &Token_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: ctx, userID
func (_m *Token) CreateToken(ctx context.Context, userID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Token_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type Token_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Token_Expecter) CreateToken(ctx interface{}, userID interface{}) *Token_CreateToken_Call {
	return &Token_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, userID)}
}

func (_c *Token_CreateToken_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Token_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Token_CreateToken_Call) Return(_a0 string, _a1 error) *Token_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Token_CreateToken_Call) RunAndReturn(run func(context.Context, uuid.UUID) (string, error)) *Token_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields: ctx, tokenString
func (_m *Token) GetUserID(ctx context.Context, tokenString string) (uuid.UUID, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Token_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type Token_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *Token_Expecter) GetUserID(ctx interface{}, tokenString interface{}) *Token_GetUserID_Call {
	return &Token_GetUserID_Call{Call: _e.mock.On("GetUserID", ctx, tokenString)}
}

func (_c *Token_GetUserID_Call) Run(run func(ctx context.Context, tokenString string)) *Token_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Token_GetUserID_Call) Return(_a0 uuid.UUID, _a1 error) *Token_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Token_GetUserID_Call) RunAndReturn(run func(context.Context, string) (uuid.UUID, error)) *Token_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewToken creates a new instance of Token. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *Token {
	mock := &Token{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
