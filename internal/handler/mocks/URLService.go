// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "github.com/dtroode/urlshorter/internal/response"

	service "github.com/dtroode/urlshorter/internal/service"

	uuid "github.com/google/uuid"
)

// URLService is an autogenerated mock type for the URLService type
type URLService struct {
	mock.Mock
}

type URLService_Expecter struct {
	mock *mock.Mock
}

func (_m *URLService) EXPECT() *URLService_Expecter {
	return &URLService_Expecter{mock: &_m.Mock}
}

// CreateShortURL provides a mock function with given fields: ctx, dto
func (_m *URLService) CreateShortURL(ctx context.Context, dto *service.CreateShortURLDTO) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateShortURLDTO) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateShortURLDTO) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateShortURLDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLService_CreateShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortURL'
type URLService_CreateShortURL_Call struct {
	*mock.Call
}

// CreateShortURL is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *service.CreateShortURLDTO
func (_e *URLService_Expecter) CreateShortURL(ctx interface{}, dto interface{}) *URLService_CreateShortURL_Call {
	return &URLService_CreateShortURL_Call{Call: _e.mock.On("CreateShortURL", ctx, dto)}
}

func (_c *URLService_CreateShortURL_Call) Run(run func(ctx context.Context, dto *service.CreateShortURLDTO)) *URLService_CreateShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.CreateShortURLDTO))
	})
	return _c
}

func (_c *URLService_CreateShortURL_Call) Return(_a0 string, _a1 error) *URLService_CreateShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLService_CreateShortURL_Call) RunAndReturn(run func(context.Context, *service.CreateShortURLDTO) (string, error)) *URLService_CreateShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShortURLBatch provides a mock function with given fields: ctx, dto
func (_m *URLService) CreateShortURLBatch(ctx context.Context, dto *service.CreateShortURLBatchDTO) ([]*response.CreateShortURLBatch, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortURLBatch")
	}

	var r0 []*response.CreateShortURLBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateShortURLBatchDTO) ([]*response.CreateShortURLBatch, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateShortURLBatchDTO) []*response.CreateShortURLBatch); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.CreateShortURLBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateShortURLBatchDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLService_CreateShortURLBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortURLBatch'
type URLService_CreateShortURLBatch_Call struct {
	*mock.Call
}

// CreateShortURLBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - dto *service.CreateShortURLBatchDTO
func (_e *URLService_Expecter) CreateShortURLBatch(ctx interface{}, dto interface{}) *URLService_CreateShortURLBatch_Call {
	return &URLService_CreateShortURLBatch_Call{Call: _e.mock.On("CreateShortURLBatch", ctx, dto)}
}

func (_c *URLService_CreateShortURLBatch_Call) Run(run func(ctx context.Context, dto *service.CreateShortURLBatchDTO)) *URLService_CreateShortURLBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.CreateShortURLBatchDTO))
	})
	return _c
}

func (_c *URLService_CreateShortURLBatch_Call) Return(_a0 []*response.CreateShortURLBatch, _a1 error) *URLService_CreateShortURLBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLService_CreateShortURLBatch_Call) RunAndReturn(run func(context.Context, *service.CreateShortURLBatchDTO) ([]*response.CreateShortURLBatch, error)) *URLService_CreateShortURLBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginalURL provides a mock function with given fields: ctx, id
func (_m *URLService) GetOriginalURL(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLService_GetOriginalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalURL'
type URLService_GetOriginalURL_Call struct {
	*mock.Call
}

// GetOriginalURL is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *URLService_Expecter) GetOriginalURL(ctx interface{}, id interface{}) *URLService_GetOriginalURL_Call {
	return &URLService_GetOriginalURL_Call{Call: _e.mock.On("GetOriginalURL", ctx, id)}
}

func (_c *URLService_GetOriginalURL_Call) Run(run func(ctx context.Context, id string)) *URLService_GetOriginalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *URLService_GetOriginalURL_Call) Return(_a0 string, _a1 error) *URLService_GetOriginalURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLService_GetOriginalURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *URLService_GetOriginalURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserURLs provides a mock function with given fields: ctx, userID
func (_m *URLService) GetUserURLs(ctx context.Context, userID uuid.UUID) ([]*response.GetUserURL, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserURLs")
	}

	var r0 []*response.GetUserURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*response.GetUserURL, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*response.GetUserURL); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.GetUserURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLService_GetUserURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserURLs'
type URLService_GetUserURLs_Call struct {
	*mock.Call
}

// GetUserURLs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *URLService_Expecter) GetUserURLs(ctx interface{}, userID interface{}) *URLService_GetUserURLs_Call {
	return &URLService_GetUserURLs_Call{Call: _e.mock.On("GetUserURLs", ctx, userID)}
}

func (_c *URLService_GetUserURLs_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *URLService_GetUserURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *URLService_GetUserURLs_Call) Return(_a0 []*response.GetUserURL, _a1 error) *URLService_GetUserURLs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLService_GetUserURLs_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*response.GetUserURL, error)) *URLService_GetUserURLs_Call {
	_c.Call.Return(run)
	return _c
}

// NewURLService creates a new instance of URLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLService {
	mock := &URLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
